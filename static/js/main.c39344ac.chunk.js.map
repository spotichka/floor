{"version":3,"sources":["Field.jsx","App.js","reportWebVitals.js","index.js"],"names":["Field","value","setValue","placeholder","className","type","onChange","e","target","App","useState","firstApartment","setFirstApartment","lastApartment","setLastApartment","apartment","setApartment","floors","setFloors","residential","setResidential","apartmentsOnFloor","setApartmentsOnFloor","requiredFloor","setRequiredFloor","residentalOnFirstFloor","setResidentalOnFirstFloor","floorsPlan","setFloorsPlan","useEffect","Math","ceil","onSubmit","obj","floorsArr","floor","push","arr","i","length","Object","keys","map","item","indexOf","preventDefault","checked","split","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAceA,G,MAZD,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YAChC,OACE,uBACEC,UAAU,aACVD,YAAaA,EACbF,MAAOA,EACPI,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOL,GAAUK,EAAEC,OAAOP,YCwH3BQ,MA7Hf,WAAgB,IAAD,EAC6BC,mBAAS,IADtC,mBACRC,EADQ,KACQC,EADR,OAE2BF,mBAAS,IAFpC,mBAERG,EAFQ,KAEOC,EAFP,OAGmBJ,mBAAS,IAH5B,mBAGRK,EAHQ,KAGGC,EAHH,OAIaN,mBAAS,IAJtB,mBAIRO,EAJQ,KAIAC,EAJA,OAKuBR,oBAAS,GALhC,mBAKRS,EALQ,KAKKC,EALL,OAMmCV,mBAAS,IAN5C,mBAMRW,EANQ,KAMWC,EANX,OAO2BZ,mBAAS,IAPpC,mBAORa,EAPQ,KAOOC,EAPP,OAQ6Cd,mBAAS,IARtD,mBAQRe,EARQ,KAQgBC,EARhB,OAUqBhB,mBAAS,IAV9B,mBAURiB,EAVQ,KAUIC,EAVJ,KA8Cb,OAlCAC,qBAAU,WACRP,EAAqBQ,KAAKC,MAAMlB,EAAgBF,GAAkBM,MACjE,CAACJ,EAAeF,EAAgBM,IAiCjC,sBAAKb,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,SACE,uBAAMA,UAAU,eAAe4B,SAjClB,SAACzB,GAIlB,IAHA,IAAI0B,EAAM,GACNC,EAAY,GAEPC,EAAQ,EAAGA,GAASlB,EAAQkB,IACnCD,EAAUE,KAAKD,GAGjB,cAAkBD,EAAlB,eAA6B,CAE3B,IAFG,IAAIC,EAAK,KACRE,EAAM,GACDC,EAAI,EAAGA,GAAKjB,EAAmBiB,IAEpCD,EADElB,GAAyB,IAAVgB,GAAeE,EAAIE,OAASd,EAC1C,sBAAOY,GAAP,CAAY,SAEZ,sBAAOA,GAAP,CAAY1B,MAGnBsB,EAAIE,EAAQ,6BAAWE,EAGzBG,OAAOC,KAAKR,GAAKS,KAAI,SAACC,GACpB,OAAIV,EAAIU,GAAMC,SAAS7B,IAAc,EAC5BS,EAAiBmB,GACZ,QAGhBf,EAAcK,GACd1B,EAAEsC,kBAME,UACE,sBAAKzC,UAAU,iBAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,+KACA,cAAC,EAAD,CAAOH,MAAOU,EAAgBT,SAAUU,OAE1C,sBAAKR,UAAU,gBAAf,UACE,kMACA,cAAC,EAAD,CAAOH,MAAOY,EAAeX,SAAUY,UAI3C,sBAAKV,UAAU,gBAAf,UACE,2LACA,cAAC,EAAD,CAAOH,MAAOgB,EAAQf,SAAUgB,OAElC,sBAAKd,UAAU,gBAAf,UACE,yKACA,cAAC,EAAD,CAAOH,MAAOc,EAAWb,SAAUc,OAGrC,sBAAKZ,UAAU,gBAAf,UACE,4OACA,uBACEC,KAAK,WACLyC,QAAS3B,EACTb,SAAU,WACMc,GAAdD,SAILA,GACC,sBAAKf,UAAU,gBAAf,UACE,+NACA,cAAC,EAAD,CACEH,MAAOwB,EACPvB,SAAUwB,OAIhB,sIAGHH,GACC,mMAAoCA,EAAcwB,MAAM,4BAAxD,OAGF,qBAAK3C,UAAU,iBAAf,SACGoC,OAAOC,KAAKd,GAAYe,KAAI,SAACC,GAC5B,OACE,gCACE,sBAAMvC,UAAU,SAAhB,SAA0BuC,IACzBhB,EAAWgB,GAAMD,KAAI,SAACC,GACrB,OAAI5B,IAAc4B,EAEd,sBAAiBvC,UAAU,mBAA3B,SACGuC,GADQA,GAIJ,SAAWA,EACb,sBAAiBvC,UAAU,aAAhBuC,GAGlB,sBAAiBvC,UAAU,YAA3B,SACGuC,GADQA,QAbPA,YC3FPK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c39344ac.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Field = ({ value, setValue, placeholder }) => {\n  return (\n    <input\n      className=\"form_input\"\n      placeholder={placeholder}\n      value={value}\n      type=\"text\"\n      onChange={(e) => setValue(+e.target.value)}\n    ></input>\n  );\n};\n\nexport default Field;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Field from \"./Field\";\n\nfunction App() {\n  let [firstApartment, setFirstApartment] = useState(\"\");\n  let [lastApartment, setLastApartment] = useState(\"\");\n  let [apartment, setApartment] = useState(\"\");\n  let [floors, setFloors] = useState(\"\");\n  let [residential, setResidential] = useState(false);\n  let [apartmentsOnFloor, setApartmentsOnFloor] = useState(\"\");\n  let [requiredFloor, setRequiredFloor] = useState(\"\");\n  let [residentalOnFirstFloor, setResidentalOnFirstFloor] = useState(\"\");\n  //let [aprtmentsQuantity, setAprtmentsQuantity] = useState(\"\");\n  let [floorsPlan, setFloorsPlan] = useState({});\n\n  useEffect(() => {\n    setApartmentsOnFloor(Math.ceil((lastApartment - firstApartment) / floors));\n  }, [lastApartment, firstApartment, floors]);\n\n  let handleSubmit = (e) => {\n    let obj = {};\n    let floorsArr = [];\n\n    for (let floor = 1; floor <= floors; floor++) {\n      floorsArr.push(floor);\n    }\n\n    for (let floor of floorsArr) {\n      let arr = [];\n      for (let i = 1; i <= apartmentsOnFloor; i++) {\n        if (residential && floor === 1 && arr.length < residentalOnFirstFloor) {\n          arr = [...arr, \"fill\"];\n        } else {\n          arr = [...arr, firstApartment++];\n        }\n      }\n      obj[floor + \" этаж\"] = arr;\n    }\n\n    Object.keys(obj).map((item) => {\n      if (obj[item].indexOf(+apartment) >= 0) {\n        return setRequiredFloor(item);\n      } else return null;\n    });\n\n    setFloorsPlan(obj);\n    e.preventDefault();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <form className=\"form_wrapper\" onSubmit={handleSubmit}>\n          <div className=\"fields_wrapper\">\n            <div className=\"field_wrapper\">\n              <h6>Первая квартира в подьезде</h6>\n              <Field value={firstApartment} setValue={setFirstApartment} />\n            </div>\n            <div className=\"field_wrapper\">\n              <h6>Последняя квартира в подьезде </h6>\n              <Field value={lastApartment} setValue={setLastApartment} />\n            </div>\n          </div>\n\n          <div className=\"field_wrapper\">\n            <h6>Количество этажей в подьезде</h6>\n            <Field value={floors} setValue={setFloors} />\n          </div>\n          <div className=\"field_wrapper\">\n            <h6>Номер квартиры для поиска</h6>\n            <Field value={apartment} setValue={setApartment} />\n          </div>\n\n          <div className=\"field_wrapper\">\n            <span> На первом этаже есть не жилые квартиры?</span>\n            <input\n              type=\"checkbox\"\n              checked={residential}\n              onChange={() => {\n                residential ? setResidential(false) : setResidential(true);\n              }}\n            />\n          </div>\n          {residential && (\n            <div className=\"field_wrapper\">\n              <h6>Укажите количество нежилых квартир</h6>\n              <Field\n                value={residentalOnFirstFloor}\n                setValue={setResidentalOnFirstFloor}\n              />\n            </div>\n          )}\n          <button>Высчитать данные</button>\n        </form>\n      </div>\n      {requiredFloor && (\n        <h5>Возможно вас интересует этаж № {requiredFloor.split(\"этаж\")} </h5>\n      )}\n\n      <div className=\"floors_wrapper\">\n        {Object.keys(floorsPlan).map((item) => {\n          return (\n            <div key={item}>\n              <span className=\"floors\">{item}</span>\n              {floorsPlan[item].map((item) => {\n                if (apartment === item) {\n                  return (\n                    <span key={item} className=\"apartment active\">\n                      {item}\n                    </span>\n                  );\n                } else if (\"fill\" === item) {\n                  return <span key={item} className=\"apartment\"></span>;\n                }\n                return (\n                  <span key={item} className=\"apartment\">\n                    {item}\n                  </span>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n// for (let currentFloor = 1; currentFloor <= floors; currentFloor++) {\n//   let arr = [];\n\n//   let lastApartmentOnFloor =\n//     firstApartment + apartmentsOnFloor * currentFloor;\n\n//   let firstApartmentOnFloor = lastApartmentOnFloor - apartmentsOnFloor;\n\n//   for (\n//     let currentApartment = firstApartmentOnFloor || 1;\n//     currentApartment < lastApartmentOnFloor;\n//     currentApartment++\n//   ) {\n//     arr = [...arr, currentApartment];\n\n//     obj[currentFloor + \" этаж\"] = arr;\n//   }\n// }\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}